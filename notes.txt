I think the reducedWorksBySums() needs to be more sophisticated, so that
it actually determines all numbers that could be valid in each cell by
finding things that work.

To avoid a combinatorial explosion, I think we can treat it as a dynamic
programming problem.  We order the cells according to how many
possibilities they have.  We go through each cell and keep track of
the sums we could have created so far.  This lets us collapse multiple
possibilities.

This still doesn't eliminate everything it could, since we aren't
considering duplicates.

Having to not have duplicates tends to reduce the number of possibilities,
so maybe it would be good enough just to try everything.

The particular case we need to handle is
[468] + [51] + [73] == 14

We need to be able to see that 8 is not a possibility for for the
first cell, since if we choose 8, then there is no way to make
the remaining 6.

Once we've filled a cell, we should eliminate that cell from the
sum constraints.

We have the potential of making additional sum constraints.

We know that the sum of two areas has to be the sum of the individual
area sums.

We know that the sum of a row, column, or region has to be 45.

This allows us to create sums and differences of areas.

R = one region.
A = total area of all constraints which use cells of R.
B = A - R
sum(B) = sum(A) - sum(R) = sum(A) - 45

We can do this over all rows, columns, and regions to create a
set of auxilliary constraints.
